global:
  postgresql: {}

image:
  registry: docker.io
  repository: bitnami/postgresql
  tag: 11.7.0-debian-10-r9
  pullPolicy: IfNotPresent
  debug: false

volumePermissions:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/minideb
    tag: buster
    pullPolicy: Always
  securityContext:
    runAsUser: 0

securityContext:
  enabled: true
  fsGroup: 1001
  runAsUser: 1001

serviceAccount:
  enabled: false

replication:
  enabled: true
  user: repl_user
  password: repl_password
  slaveReplicas: 1
  synchronousCommit: "off"
  numSynchronousReplicas: 0
  applicationName: my_application

# postgresqlPostgresPassword:
postgresqlUsername: postgres
postgresqlPassword: admin123

postgresqlDataDir: /bitnami/postgresql/data
extraEnv: []

terminationGracePeriodSeconds: 30

ldap:
  enabled: false
  url: ""
  server: ""
  port: ""
  prefix: ""
  suffix: ""
  baseDN: ""
  bindDN: ""
  bind_password:
  search_attr: ""
  search_filter: ""
  scheme: ""
  tls: false

service:
  type: ClusterIP
  port: 5432
  annotations: {}

shmVolume:
  enabled: true
  chmod:
    enabled: true

persistence:
  enabled: true
  # existingClaim:
  mountPath: /bitnami/postgresql
  subPath: ""
  # storageClass: "-"
  accessModes:
    - ReadWriteOnce
  size: 8Gi
  annotations: {}

updateStrategy:
  type: RollingUpdate

## PostgreSQL Master parameters
master:
  nodeSelector: {}
  affinity: {}
  tolerations: []
  labels: {}
  annotations: {}
  podLabels: {}
  podAnnotations: {}
  priorityClassName: ""
  extraInitContainers:
  extraVolumeMounts: []
  extraVolumes: []
  sidecars: []

## PostgreSQL Slave parameters
slave:
  nodeSelector: {}
  affinity: {}
  tolerations: []
  labels: {}
  annotations: {}
  podLabels: {}
  podAnnotations: {}
  priorityClassName: ""
  extraInitContainers:
  extraVolumeMounts: []
  extraVolumes: []
  sidecars: []

resources:
  requests:
    memory: 256Mi
    cpu: 250m

networkPolicy:
  enabled: false
  allowExternal: true

livenessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

readinessProbe:
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

metrics:
  enabled: false
  service:
    type: ClusterIP
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9187"
    loadBalancerIP:
  serviceMonitor:
    enabled: false
    additionalLabels: {}
  prometheusRule:
    enabled: false
    additionalLabels: {}
    namespace: ""
    rules: []
  image:
    registry: docker.io
    repository: bitnami/postgres-exporter
    tag: 0.8.0-debian-10-r28
    pullPolicy: IfNotPresent

  securityContext:
    enabled: false
    runAsUser: 1001

  livenessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
