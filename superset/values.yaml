replicaCount: 1
image:
  repository: "kunaldawn/superset"
  tag: "latest"
  pullPolicy: "IfNotPresent"
  pullSecrets: []

configFile: |-
  from werkzeug.contrib.cache import RedisCache

  #---------------------------------------------------------
  # Superset specific config
  #---------------------------------------------------------
  ROW_LIMIT = 5000
  SUPERSET_WEBSERVER_PORT = 8088
  SECRET_KEY = '\2\1thisismyscretkey\1\2\e\y\y\h'
  SQLALCHEMY_DATABASE_URI = 'postgresql+psycopg2://postgres:admin123@postgresql:5432/postgres'
  WTF_CSRF_ENABLED = True
  WTF_CSRF_EXEMPT_LIST = []
  MAPBOX_API_KEY = ''
  SQLLAB_ASYNC_TIME_LIMIT_SEC = 60 * 60 * 6

  CACHE_CONFIG = {
    'CACHE_TYPE': 'redis',
    'CACHE_DEFAULT_TIMEOUT': 300,
    'CACHE_KEY_PREFIX': 'superset_',
    'CACHE_REDIS_HOST': 'redis-master',
    'CACHE_REDIS_PORT': 6379,
    'CACHE_REDIS_DB': 1,
    'CACHE_REDIS_URL': 'redis://redis-master:6379/1'}

  class CeleryConfig(object):
      BROKER_URL = 'redis://redis-master:6379/0'
      CELERY_IMPORTS = (
          'superset.sql_lab',
      )
      CELERY_RESULT_BACKEND = 'redis://redis-master:6379/0'
      CELERY_ANNOTATIONS = {"tasks.add": {"rate_limit": "10/s"}}
      CELERY_TASK_PROTOCOL = 1


  CELERY_CONFIG = CeleryConfig
  
  RESULTS_BACKEND = RedisCache(
    host='redis-master',
    port=6379,
    key_prefix='superset_results'
  )

service:
  type: LoadBalancer
  port: 8088
  targetPort: 8088

livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 80
  timeoutSeconds: 5
  periodSeconds: 10
  failureThreshold: 2

readinessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 30
  timeoutSeconds: 5
  periodSeconds: 10
  failureThreshold: 2

workers: 2
